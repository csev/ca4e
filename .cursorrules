# CA4E Project - LTI and Tsugi Framework Rules

## Project Overview
This is the Computer Architecture for Everybody (CA4E) project, which provides educational tools that integrate with Learning Management Systems (LMS) through LTI (Learning Tools Interoperability) and the Tsugi framework.

## LTI (Learning Tools Interoperability) Basics
LTI is a standard that allows educational tools to integrate seamlessly with LMS platforms like Canvas, Moodle, Blackboard, etc. It provides:
- Single sign-on from the LMS
- User context and course information
- Grade passback capabilities
- Secure communication between LMS and tools

## Tsugi Framework Architecture
Tsugi is a PHP framework that simplifies LTI integration. The project uses the modern Tsugi library located in `tsugi/vendor/tsugi/lib/src/`.

### Core Components
- **LTIX**: Main entry point for LTI sessions (`tsugi/vendor/tsugi/lib/src/Core/LTIX.php`)
- **User**: Represents the authenticated user from the LMS
- **Context**: Contains course/section information
- **Link**: Represents the specific tool instance in the course
- **Result**: Handles grade passback and student progress
- **Key**: Manages LTI consumer keys and secrets

### Key Classes Location
All core classes are in `tsugi/vendor/tsugi/lib/src/Core/`:
- `LTIX.php` - Main LTI session management
- `User.php` - User information and authentication
- `Context.php` - Course context and metadata
- `Link.php` - Tool link configuration
- `Result.php` - Grade passback and results
- `Key.php` - LTI key management

## Standard Tool Structure
Every tool in the `tools/` directory follows this pattern:

```php
<?php
require_once "../config.php";
use \Tsugi\Core\LTIX;

// Initialize LTI if we received a launch. If this was a non-LTI GET,
// then $USER will be null (i.e. anonymous)
$LTI = LTIX::session_start();
?>
<!DOCTYPE html>
<!-- Tool HTML content -->
```

## Configuration
- **Main config**: `tsugi/config.php` - Database, URLs, tool folders
- **Tool config**: `tools/config.php` - Includes main config and sets up tool environment
- **Tool folders**: Configured in main config as `$CFG->tool_folders = array("admin", "../tools", "../mod")`

## Session Management
`LTIX::session_start()` handles:
- LTI launch validation
- Session creation
- Global variable setup ($USER, $CONTEXT, $LINK, $RESULT, $KEY)
- Anonymous access for non-LTI requests

**Important**: LTI tools are cookieless - they don't use traditional PHP session cookies. Session state is maintained through LTI launch parameters and the Tsugi framework's internal session management.

## Global Variables After LTI Launch
When an LTI launch occurs, these variables are available:
- `$USER` - User object with displayname, email, etc. (or null if anonymous)
- `$CONTEXT` - Course context object with title, id, etc.
- `$LINK` - Tool link object with configuration
- `$RESULT` - Result object for grade passback
- `$KEY` - LTI key object for consumer management

## Anonymous vs Authenticated Access
- **LTI Launch**: User is authenticated, all variables are objects
- **Direct Access**: User is anonymous, all variables are null
- **Anonymous Limitations**: When `$USER` is null, there is no user context, so:
  - No grade passback is possible (no `$RESULT` object)
  - Many Tsugi API features are unavailable
  - No course context or user preferences
  - No progress tracking or persistence
- Tools should handle both scenarios gracefully, but be aware of these limitations

## Common Patterns
1. **User Check**: `if ($USER && $USER->instructor)` for instructor-specific features
2. **Context Display**: Show course information when available
3. **Grade Passback**: Use `LTIX::gradeSend()` for sending grades back to LMS
4. **Session Persistence**: LTI sessions persist across page loads

## Grade Submission
For submitting grades to the LMS, use the simplified approach:

### Grade Submission Endpoint
```php
<?php
require_once "../config.php";
use \Tsugi\Core\LTIX;

// Sanity checks
$LAUNCH = LTIX::requireData();
$user_id = $USER->id;

// Get and validate grade
$grade = floatval($_POST['grade']);
if ($grade < 0.0 || $grade > 1.0) {
    echo json_encode(Array("status" => "failure", "detail" => "Grade must be between 0.0 and 1.0"));
    return;
}

// Submit grade using Tsugi
$debug_log = array();
$retval = LTIX::gradeSend($grade, false, $debug_log);
if (is_string($retval)) {
    echo json_encode(Array("status" => "failure", "detail" => $retval, "debug_log" => $debug_log));
    return;
}

echo json_encode(Array("status" => "success", "debug_log" => $debug_log));
?>
```

### JavaScript Integration
```javascript
// Use addSession() helper for proper session handling
fetch('<?php echo addSession('grade-submit.php'); ?>', {
    method: 'POST',
    body: formData
})
.then(response => response.json())
.then(data => {
    if (data.status === 'success') {
        console.log('Grade submitted successfully');
    } else {
        console.error('Grade submission failed:', data.detail);
    }
});
```

### Key Points
- Use `LTIX::requireData()` instead of manual session handling
- Use `LTIX::gradeSend()` for proper grade submission
- Use `addSession()` helper in JavaScript for proper URL generation
- Return JSON with `status` and `debug_log` fields
- Grades should be between 0.0 and 1.0

## Development Guidelines
- Always check if LTI variables exist before using them
- Provide fallback behavior for anonymous users
- Use proper error handling for LTI operations
- Follow the established tool structure pattern
- Test both LTI and direct access scenarios

## File Organization
- `tools/` - Individual LTI tools (circuit simulators, calculators, etc.)
- `tsugi/` - Tsugi framework and configuration
- `mod/` - Additional modules and tools
- `admin/` - Administrative tools and interfaces

## Integration Points
- **LMS Integration**: Through LTI launch URLs
- **Grade Passback**: Via Result objects
- **User Management**: Through User objects
- **Course Context**: Via Context objects
- **Tool Configuration**: Through Link objects

## Security Considerations
- LTI launches are cryptographically signed
- User context comes from trusted LMS
- Session management is handled by Tsugi
- Direct access is limited to anonymous functionality

## Testing
- Test tools both as LTI launches and direct access
- Verify user context and instructor privileges
- Test grade passback functionality
- Validate session persistence

## Common Issues
- Missing LTI variables when accessed directly
- Session state not persisting
- Grade passback failures
- Configuration path issues

## Autograder Implementation Patterns

### Overview
CA4E tools use a standardized autograder system that provides step-by-step grading with interactive UI components. The system consists of Exercise classes, assignment configuration, and modal-based grading interfaces.

### 1. Assignment Configuration

#### assignments.php
Each tool needs an `assignments.php` file to define available exercises:
```php
<?php
$assignments = array(
    'HelloWorldExercise' => 'Hello, World!',
    'SimplePrint42Exercise' => 'Simple Print 42 (MISTIC)',
    'PrintOut42Exercise' => 'Print out 42',
);
```

#### LTI Custom Variable Setup
Assignments are configured via LTI custom variable `exercise`:
```php
// In tool's index.php
$assn = Settings::linkGetCustom('exercise');
// Make sure it is a valid assignment
if ( $assn && ! isset($assignments[$assn]) ) $assn = null;
```

### 2. Assignment Button Visibility

#### Standard Pattern
```php
<?php if ($USER && $assn) : ?>
    <button id="assignmentBtn" class="assignment-btn">Assignment</button>
<?php endif; ?>
```

#### With Instructor Testing Support
```php
<?php if ($USER && ($assn || ($USER && $USER->instructor))) : ?>
    <button id="assignmentBtn" class="assignment-btn">Assignment</button>
<?php endif; ?>
```

### 3. Assignment Modal Structure

#### HTML Modal Template
```html
<?php if ($USER && ($assn || ($USER && $USER->instructor))) : ?>
<!-- Assignment Modal -->
<div id="assignmentModal" class="assignment-modal hidden">
    <div id="assignmentModalHeader" class="modal-header" title="Drag to move">
        <span>📋 Assignment</span>
        <button class="close-btn" onclick="closeAssignmentModal()" title="Close">×</button>
    </div>
    <div class="modal-content">
        <p id="assignmentInstructions">
            <!-- Instructions will be loaded dynamically from the exercise class -->
        </p>
        <div id="gradingSection" style="margin-top: 20px; display: none;">
            <h3>Program Grading</h3> <!-- Or "WASM Grading", "Circuit Grading", etc. -->
            <div id="stepDisplay"></div>
            <button id="gradeBtn" onclick="startGrading()">Start Grading</button>
        </div>
        <div id="startGradingSection" style="margin-top: 20px;">
            <button id="startGradeBtn" onclick="startGrading()">Start Grading</button>
        </div>
    </div>
</div>
<?php endif; ?>
```

#### Modal CSS (Essential Classes)
```css
.assignment-modal {
    position: fixed;
    background: white;
    border: 2px solid #007bff;
    border-radius: 8px;
    box-shadow: 0 4px 20px rgba(0,0,0,0.3);
    z-index: 1000;
    width: 500px;
    max-height: 80vh;
    overflow-y: auto;
}

.assignment-modal.hidden {
    display: none;
}

.modal-header {
    background: #007bff;
    color: white;
    padding: 12px 16px;
    cursor: grab;
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.spinner-gear {
    display: inline-block;
    animation: spin 2s linear infinite;
    font-size: 20px;
}

@keyframes spin {
    from { transform: rotate(0deg); }
    to { transform: rotate(360deg); }
}
```

### 4. Exercise Base Class Structure

#### exercises.js Base Class Template
```javascript
class Exercise {
    constructor(name, description, steps, instructions = '') {
        this.name = name;
        this.description = description;
        this.steps = steps.map(step => ({ ...step, status: "pending" }));
        this.instructions = instructions;
        this.currentStep = 0;
        this.isGrading = false;
    }

    startGrading() {
        this.currentStep = 0;
        this.isGrading = true;
        this.hideInstructions();
        this.showGradingSection();
        this.hideStartGradingButton();
        this.updateGradeButton();
        this.nextStep();
    }

    resetGrading() {
        this.currentStep = 0;
        this.isGrading = false;
        this.steps.forEach(step => { step.status = "pending"; });
        this.showInstructions();
        this.hideGradingSection();
        this.showStartGradingButton();
        this.clearStepDisplay();
    }

    // UI Management Methods
    showGradingSection() {
        const section = document.getElementById('gradingSection');
        if (section) section.style.display = 'block';
    }

    hideGradingSection() {
        const section = document.getElementById('gradingSection');
        if (section) section.style.display = 'none';
    }

    showStartGradingButton() {
        const section = document.getElementById('startGradingSection');
        if (section) section.style.display = 'block';
    }

    hideStartGradingButton() {
        const section = document.getElementById('startGradingSection');
        if (section) section.style.display = 'none';
    }

    showNextButton() {
        const button = document.getElementById('gradeBtn');
        if (button) {
            button.textContent = 'Next';
            button.onclick = () => this.continueGrading();
        }
    }

    showExecutingIndicator() {
        const display = document.getElementById('stepDisplay');
        if (display) {
            display.innerHTML = `
                <div style="display: flex; align-items: center; gap: 10px; padding: 15px;">
                    <div class="spinner-gear">⚙️</div>
                    <span>Executing program...</span>
                </div>
            `;
        }
    }

    // Override submitGradeToLMS method (will be replaced by global function)
    submitGradeToLMS(grade) {
        console.log(`Grade ${grade} would be submitted to LMS`);
    }
}
```

### 5. Specific Exercise Implementation

#### Example Exercise Class
```javascript
class HelloWorldExercise extends Exercise {
    constructor() {
        const steps = [
            { name: "Compilation Check", description: "Check if code compiles without errors" },
            { name: "Execution Check", description: "Check if program runs successfully" },
            { name: "Output Verification", description: "Check if program outputs expected result" }
        ];

        const instructions = `
            <h3>Hello, World!</h3>
            <p>Write a program that outputs "Hello, World!".</p>
        `;

        super("Hello World", "Output 'Hello, World!'", steps, instructions);
    }

    checkStep(stepIndex) {
        switch (stepIndex) {
            case 0: return this.checkCompilation();
            case 1: return this.checkExecution();
            case 2: return this.checkOutput();
            default: return { passed: false, message: "Unknown step" };
        }
    }

    checkOutput() {
        const output = document.getElementById('output');
        if (!output) {
            return { passed: false, message: "Cannot find output display." };
        }

        const outputText = output.textContent || output.innerText;
        if (outputText.includes('Hello, World!')) {
            return { passed: true, message: "✅ Program correctly outputs 'Hello, World!'!" };
        } else {
            return { passed: false, message: `Expected 'Hello, World!', but got: ${outputText}` };
        }
    }
}
```

### 6. Modal Event Handlers

#### JavaScript Modal Management
```javascript
// Assignment modal functions
function showAssignmentModal() {
    // Reset the grading state to ensure fresh start
    if (currentExercise) {
        currentExercise.resetGrading();
    }
    
    // Load instructions from the current exercise
    if (currentExercise && currentExercise.instructions) {
        const instructionsElement = document.getElementById('assignmentInstructions');
        if (instructionsElement) {
            let instructions = currentExercise.instructions;
            
            // Add testing note for instructors when no assignment is configured
            if (!assn && isInstructor) {
                instructions = '<div style="background: #fff3cd; border: 1px solid #ffeaa7; padding: 10px; border-radius: 4px; margin-bottom: 15px;"><strong>🧪 Instructor Testing Mode</strong><br>No assignment is currently configured. This is the default exercise for testing the grading system.</div>' + instructions;
            }
            
            instructionsElement.innerHTML = instructions;
        }
    }
    
    assignmentModal.classList.remove('hidden');
    centerAssignmentModal();
}

function closeAssignmentModal() {
    // Reset the grading state when closing
    if (currentExercise) {
        currentExercise.resetGrading();
    }
    
    // Hide the modal
    assignmentModal.classList.add('hidden');
}
```

### 7. Exercise Initialization

#### Assignment-Based Exercise Creation
```javascript
document.addEventListener('DOMContentLoaded', function() {
    // Create the appropriate exercise instance based on assignment
    if ( 'HelloWorldExercise' == assignmentType) {
        currentExercise = new HelloWorldExercise();
    } else if ( 'SimplePrint42Exercise' == assignmentType) {
        currentExercise = new SimplePrint42Exercise();
    } else if ( '' == assignmentType && isInstructor) {
        // Default assignment for instructor testing
        currentExercise = new HelloWorldExercise();
    }
    
    // Override the exercise's submitGradeToLMS method to use the global function
    if (currentExercise) {
        currentExercise.submitGradeToLMS = submitGradeToLMS;
    }
});
```

### 8. Grade Submission Integration

#### Global Grade Submission Function
```javascript
function submitGradeToLMS(grade) {
    const formData = new FormData();
    formData.append('grade', grade);
    formData.append('code', 'EXERCISE_COMPLETED');
    
    fetch(gradeSubmitUrl, {
        method: 'POST',
        body: formData
    })
    .then(response => response.json())
    .then(data => {
        if (data.status === 'success') {
            alert('🎉 Excellent work! Your assignment has been completed successfully and your grade has been submitted to the LMS.');
        } else {
            alert(`⚠️ Grade submission failed: ${data.detail}`);
        }
    })
    .catch(error => {
        alert(`⚠️ Grade submission error: ${error.message}`);
    });
}
```

### 9. Interactive Grading Flow

#### Multi-Step Grading with Next Buttons
For tools that need interactive step-by-step grading:
```javascript
// In Exercise base class
executeStep(stepIndex) {
    const step = this.steps[stepIndex];
    const result = this.checkStep(stepIndex);
    
    step.status = result.passed ? "passed" : "failed";
    this.displayStepResult(stepIndex, result);
    
    if (!result.passed) {
        this.isGrading = false;
        this.showRetryButton();
    } else if (stepIndex < this.steps.length - 1) {
        // Show Next button for intermediate steps
        this.showNextButton();
    }
}

// In specific exercise classes
continueGrading() {
    // Special handling for specific steps (e.g., auto-run code)
    if (this.currentStep === 1) {
        // Trigger execution automatically
        const runButton = document.getElementById('runButton');
        if (runButton) {
            runButton.click();
            setTimeout(() => {
                super.continueGrading();
            }, 1000);
        } else {
            super.continueGrading();
        }
    } else {
        super.continueGrading();
    }
}
```

### 10. Common Patterns by Tool Type

#### Code-Based Tools (WASM, CDC8512)
- Check compilation/assembly
- Check execution
- Check output content

#### Circuit/Logic Tools
- Check component placement
- Check connections
- Check simulation results

#### Calculator Tools
- Check input handling
- Check calculation accuracy
- Check display formatting

### 11. Instructor Features

#### Default Testing Assignments
```javascript
// Allow instructors to test without configured assignment
if ( '' == assignmentType && isInstructor) {
    currentExercise = new DefaultTestExercise();
}
```

#### Testing Mode Indicators
```html
<div style="background: #fff3cd; border: 1px solid #ffeaa7; padding: 10px; border-radius: 4px; margin-bottom: 15px;">
    <strong>🧪 Instructor Testing Mode</strong><br>
    No assignment is currently configured. This is the default exercise for testing the grading system.
</div>
```

### 12. Error Handling Patterns

#### Common Error Checks
```javascript
// Check for required DOM elements
const output = document.getElementById('output');
if (!output) {
    return { passed: false, message: "Cannot find output display." };
}

// Check for placeholder content
const outputText = output.textContent || output.innerText;
if (outputText.includes('Output will appear here') || outputText.trim() === '') {
    return { passed: false, message: "No output detected. Please run your program first." };
}

// Check for error states
const errorOutput = document.getElementById('errorOutput');
if (errorOutput && !errorOutput.classList.contains('hidden') && errorOutput.textContent.trim()) {
    return { passed: false, message: `Error detected: ${errorOutput.textContent}` };
}
```

## Resources
- Tsugi Documentation: `tsugi/vendor/tsugi/lib/docs/`
- LTI Specification: IMS Global Learning Consortium
- CA4E Project: Computer Architecture for Everybody
